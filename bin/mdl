#!/usr/bin/guile \
-e main -s
!#

;; $PATH requirements:
;;
;; - youtube-dl
;; - ffmpeg
;; - AtomicParsley
;;
;; (Optionally) Also uses $EDITOR, mpv and mpc.

(use-modules (personal scripting)
             (personal string)
             (site pipe)
             (ice-9 ftw)
             (ice-9 match)
             (ice-9 readline)
             (rnrs sorting)
             (srfi srfi-1))

(define lib                       (home-path "music/lib"))
(define artwork                   (home-path "music/artwork"))
(define playlists `((genres    . ,(home-path "music/playlists/genres"))
                    (shuffle   . ,(home-path "music/playlists/shuffle"))
                    (vault     . ,(home-path "music/playlists/vault"))))
(define store     `((root      . ,(home-path "music/store"))
                    (wishlist  . ,(home-path "music/store/status/wishlist"))
                    (granting  . ,(home-path "music/store/status/granting"))
                    (available . ,(home-path "music/store/status/available"))
                    (importing . ,(home-path "music/store/status/importing"))))

(define (flock-store mode)
  (flocks mode
          (assoc-ref store 'wishlist)
          (assoc-ref store 'granting)
          (assoc-ref store 'available)
          (assoc-ref store 'importing)))

(define (phase-edit)
  (let ((ports (flock-store "r")))
    (edit (assoc-ref store 'wishlist))
    (close-ports ports))
  (phase-download))

(define (split-name title-string)
  (let ((hyphen? (string-contains title-string " - ")))
    (if hyphen?
        (string-join
         (list (substring title-string 0 hyphen?)
               (substring title-string (+ 3 hyphen?))) "\n")
        title-string)))

(define (stage pid)
  (string-append (assoc-ref store 'root) "/" (number->string pid)))

(define (download grants)
  (map (lambda (grant)
         (let ((ports (flock-store "r"))
               (pid 1))
           (while (file-exists? (stage pid))
             (set! pid (1+ pid)))
           (enter-dir (stage pid))
           (close-ports ports)
           (call-with-output-file "url"
             (lambda (out)
               (display (string-append (first-word grant) "\n") out)))
           (call-with-output-file "name"
             (lambda (out)
               (display
                (split-name
                 (system-output (string-append "youtube-dl --get-title '"
                                               (first-word grant) "'"))) out)))
           (touch "album" "lyrics")
           (call-with-output-file "rating"
             (lambda (out)
               (display (string-join (map number->string (iota 5 5 -1))
                                     "\n" 'suffix) out)))
           (call-with-output-file "genre"
             (lambda (out)
               (display (string-join
                         '("Classical" "Electronic" "Epic" "Folk" "House" "Pop"
                           "Rap" "RnB" "Rock" "Trap") "\n" 'suffix) out)))
           (if (list? (fs-tree (assoc-ref playlists 'shuffle)))
               (call-with-output-file "playlists"
                 (lambda (out)
                   (display
                    (string-join (->>
                                  (cadr
                                   (fs-tree (assoc-ref playlists 'shuffle)))
                                  (map (lambda (playlist)
                                         (basename playlist ".m3u")))
                                  (filter (lambda (playlist)
                                            (not (string=? playlist "All")))))
                                 "\n" 'suffix) out)))
               (touch "playlists"))
           (system* "youtube-dl" "-f" "140" "-o" "original.m4a"
                    (first-word grant))
           (let* ((ports (flock-store "r"))
                  (granting (read-lines (cadr ports)))
                  (available (read-lines (list-ref ports 2))))
             (close-ports ports)
             (let ((lock-ports (flocks "r"
                                       (assoc-ref store 'wishlist)
                                       (assoc-ref store 'importing)))
                   (write-ports (flocks "w"
                                        (assoc-ref store 'granting)
                                        (assoc-ref store 'available))))
               (display
                (string-join
                 (lset-difference equal? granting (list grant)) "\n" 'suffix)
                (car write-ports))
               (display
                (string-join (append available (list grant)) "\n" 'suffix)
                (cadr write-ports))
               (close-ports (append lock-ports write-ports)))))) grants))

(define (phase-download)
  (match (readline "Download? (Y/n/q) ")
    ("n" (phase-import))
    ("q" (exit))
    (_ (let* ((ports (flock-store "a+"))
              (wishlist (read-lines (car ports)))
              (granting (read-lines (cadr ports)))
              (available (read-lines (list-ref ports 2)))
              (grants (lset-difference equal? wishlist granting available)))
         (if (null? grants)
             (begin
               (close-ports ports)
               (phase-import))
             (begin
               (display (string-join grants "\n" 'suffix) (cadr ports))
               (close-ports ports)
               (download grants)
               (phase-import)))))))

(define (find-stage)
  (let ((ports (flock-store "r"))
        (root (fs-tree (assoc-ref store 'root))))
    (if (> (length root) 1)
        (let ((stages (lset-difference
                       =
                       (->> (cadr root)
                            (map car)
                            (filter string->number)
                            (map string->number))
                       (map string->number
                            (read-lines (list-ref ports 3))))))
          (close-ports ports)
          (if (null? stages)
              #f
              (car stages)))
        (begin
          (close-ports ports)
          #f))))

(define (import stage)
  (enter-dir (string-append
              (assoc-ref store 'root) "/" (number->string stage)))
  (readline (string-append "Next is " ", continue? (Y\n)"))
  )

(define (phase-import)
  (while (find-stage)
    (import (find-stage))))

(define (main args)
  (touch (assoc-ref store 'wishlist)
         (assoc-ref store 'granting)
         (assoc-ref store 'available)
         (assoc-ref store 'importing))
  (if (> (length args) 1)
      (let ((ports (flock-store "a")))
        (display (string-append (string-join (cdr args)) "\n")
                 (car ports))
        (close-ports ports)
        (phase-edit))
      (phase-edit)))
