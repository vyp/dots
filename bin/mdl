#!/usr/bin/guile \
-e main -s
!#

;; $PATH requirements:
;;
;; - youtube-dl
;; - ffmpeg
;; - AtomicParsley
;;
;; (Optionally) Also uses $EDITOR, mpv and mpc.

(use-modules (personal scripting)
             (personal string)
             (site pipe)
             (ice-9 ftw)
             (ice-9 match)
             (ice-9 readline)
             (rnrs sorting)
             (srfi srfi-1))

(define lib                       (home-path "music/lib"))
(define artwork                   (home-path "music/artwork"))
(define playlists `((genres    . ,(home-path "music/playlists/genres"))
                    (shuffle   . ,(home-path "music/playlists/shuffle"))
                    (vault     . ,(home-path "music/playlists/vault"))))
(define store     `((root      . ,(home-path "music/store"))
                    (wishlist  . ,(home-path "music/store/status/wishlist"))
                    (granting  . ,(home-path "music/store/status/granting"))
                    (available . ,(home-path "music/store/status/available"))
                    (importing . ,(home-path "music/store/status/importing"))))

(define (flock-store mode)
  (flocks mode
          (assoc-ref store 'wishlist)
          (assoc-ref store 'granting)
          (assoc-ref store 'available)
          (assoc-ref store 'importing)))

(define (phase-edit)
  (let ((ports (flock-store "r")))
    (edit (assoc-ref store 'wishlist))
    (close-ports ports))
  (phase-download))

(define (phase-download)
  (match (readline "Download? (Y/n/q) ")
    ("n" (phase-import))
    ("q" (exit))
    (_ (let* ((ports (flock-store "a+"))
              (wishlist (read-lines (car ports)))
              (granting (read-lines (cadr ports)))
              (available (read-lines (list-ref ports 2)))
              (grants (lset-difference equal? wishlist granting available)))
         (if (null? grants)
             (begin
               (close-ports ports)
               (phase-import))
             (begin
               (display (string-join grants "\n" 'suffix) granting)
               (close-ports ports)
               (download grants)
               (phase-import)))))))

(define (phase-import)
  (display "Phase import.\n"))

(define (main args)
  (touch (assoc-ref store 'wishlist)
         (assoc-ref store 'granting)
         (assoc-ref store 'available)
         (assoc-ref store 'importing))
  (if (> (length args) 1)
      (let ((ports (flock-store "a")))
        (display (string-append (string-join (cdr args)) "\n")
                 (car ports))
        (close-ports ports)
        (phase-edit))
      (phase-edit)))
