#!/usr/bin/guile \
-e main -s
!#

;; $PATH dependencies:
;;
;; - youtube-dl
;; - ffmpeg
;; - fold (coreutils)
;; - sed
;;
;; NOTE: Uses `mpv' to play media files.
;; NOTE: Runs `mpc update' if applicable after adding music to library.
;;
;; TODO: Remove `sed' dependency.

(use-modules (personal scripting)
             (personal string)
             (site pipe)
             (ice-9 ftw)
             (ice-9 match)
             (ice-9 readline)
             (rnrs sorting)
             (srfi srfi-1))

(define playlists-directory
  (home-path ".config/mpd/playlists"))

(define (play file)
  (system* "mpv" "--no-video" "--loop=inf" file))

(define (stage-path root pid)
  (string-append root "/stage" (number->string pid)))

(define (find-new-stage root)
  (mkdir-p root)
  (let ((pid 1))
    (while (file-exists? (stage-path root pid))
      (set! pid (1+ pid)))
    (stage-path root pid)))

(define (create-playlists-file playlists)
  (call-with-output-file "playlists-unwrapped"
    (lambda (out)
      (when (not (null? playlists))
        (display (string-join playlists) out))
      (newline out)
      (display (->> (cadr (fs-tree playlists-directory))
                    (map (lambda (playlist) (basename playlist ".m3u")))
                    (filter (lambda (playlist)
                              (not (or (string=? playlist "all")
                                       (string->number playlist)))))
                    (list-sort string<?)
                    (string-join)) out)
      (newline out)))
  (system "fold -s playlists-unwrapped | sed 's/ *$//' > playlists")
  (delete-file "playlists-unwrapped"))

(define (find-pending todo done)
  (unless (file-exists? done)
    (call-with-output-file done
      (lambda (out)
        (display "" out))))
  (lset-difference
   (lambda (s1 s2) (string-prefix? s2 s1))
   (read-lines todo)
   (read-lines done)))

(define (download-pending store todo done)
  (let ((pending (find-pending todo done)))
    (when (not (null? pending))
      (let* ((track (string-split (car pending) #\space))
             (url (car track))
             (playlists (cdr track))
             (trims (filter (lambda (str) (string-index str #\:)) playlists))
             (name (system-output
                    (string-append "youtube-dl --get-title '" url "'"))))
        (enter-dir (find-new-stage store))
        (call-with-output-file "name"
          (lambda (out)
            (display name out)
            (when (not (null? trims))
              (display (string-join trims) out)
              (newline out))))
        (call-with-output-file "url"
          (lambda (out)
            (display url out)
            (newline out)))
        (create-playlists-file
         (filter (lambda (str) (not (string-index str #\:))) playlists))
        (system* "youtube-dl" "-f" "43" "--no-part"
                 "-o" (string-append (substring-end name 1) ".webm")
                 url)
        (append-to-file done (string-append url "\n"))
        (download-pending store todo done)))))

(define (begin-downloading edit? store todo done)
  (when edit?
    (edit todo))
  (download-pending store todo done)
  (bell))

(define (prune-todo todo done)
  (let* ((current-pid (getpid))
         (pids (->> (string-split (system-output
                                   "ps cax | grep mdl | grep -o '^[]*[0-9]*'")
                                  #\newline)
                    (filter string->number)
                    (map string->number)
                    (filter (lambda (pid) (not (eq? pid current-pid)))))))
    (if (not (null? pids))
        (begin
          (display "Another `mdl' process already running!")
          (newline)
          (exit 1))
        (let ((pending (find-pending todo done)))
          (call-with-output-file todo
            (lambda (out)
              (display (string-join pending "\n" 'suffix) out)))
          (call-with-output-file done
            (lambda (out)
              (display "" out)))))))

(define (skip stage)
  (chdir "..")
  (rename-file stage (string-append "." stage)))

(define (cleanup store)
  (chdir store)
  (let ((skipped
         (scandir store (lambda (name) (string-prefix? ".stage" name)))))
    (when (not (null? skipped))
      (rename-file (car skipped) (find-new-stage store))
      (cleanup store))))

(define (prepend-hours time)
  (string-append "00:" time))

(define* (convert track #:optional trims)
  (let ((webm (get-file "webm")))
    (if trims
        (case (length trims)
          ((1) (system* "ffmpeg" "-y" "-i" webm
                        "-ss" (prepend-hours (car trims))
                        "-vn" "-acodec" "copy" track))
          ((2) (if (string-null? (car trims))
                   (system* "ffmpeg" "-y" "-i" webm
                            "-to" (prepend-hours (cadr trims))
                            "-vn" "-acodec" "copy" track)
                   (system* "ffmpeg" "-y" "-i" webm
                            "-ss" (prepend-hours (car trims))
                            "-to" (prepend-hours (cadr trims))
                            "-vn" "-acodec" "copy" track))))
        (system* "ffmpeg" "-y" "-i" webm
                 "-vn" "-acodec" "copy" track))))

(define (get-artist-and-title name)
  (let ((artist-end (string-contains name " - ")))
    (list (substring name 0 artist-end)
          (substring name (+ 3 artist-end)))))

(define (add-to-playlist playlist name)
  (append-to-file playlist (string-append name ".ogg\n"))
  (sort-file playlist))

(define (add stage)
  (let* ((track (car (read-lines "name")))
         (track-info (get-artist-and-title track))
         (artist (car track-info))
         (title (cadr track-info))
         (ogg (get-file "ogg")))
    (system* "ffmpeg" "-y" "-i" ogg
             "-metadata" (string-append "artist=" artist)
             "-metadata" (string-append "title=" title)
             "-c:a" "copy" "out.ogg")
    (rename-file "out.ogg" ogg)
    (->> (string-split (car (read-lines "playlists")) #\space)
         (filter (lambda (playlist) (not (string-null? playlist))))
         (append '("all"))
         (map (lambda (playlist) (add-to-playlist (string-append
                                                   playlists-directory "/"
                                                   playlist ".m3u") track))))
    (rename-file ogg (string-append (home-path "music/") ogg))
    (delete-files (get-file "webm") "name" "playlists" "url")
    (chdir "..")
    (rmdir stage)
    (when (file-exists? (home-path ".config/mpd/pid"))
      (system* "mpc" "update"))))

(define (process store)
  (let ((stages
         (scandir store (lambda (name) (string-prefix? "stage" name)))))
    (if (null? stages)
        (cleanup store)
        (let ((stage (car stages)))
          (chdir (string-append store "/" stage))
          (match (readline
                  (string-append
                   "Next is '" (car (read-lines "name")) "', continue? "))
            ((or "y" "")
             (let ((good? #f))
               (while (not good?)
                 (play (get-file "webm"))
                 (edit "name" "playlists")
                 (let* ((track-info (read-lines "name"))
                        (trim (cdr track-info))
                        (ogg (string-append (car track-info) ".ogg")))
                   (match trim
                     (()
                      (begin
                        (convert ogg)
                        (set! good? #t)))
                     (("-")
                      (begin
                        (skip stage)
                        (process store)))
                     (_
                      (begin
                        (convert ogg (string-split (car trim) #\-))
                        (play ogg)
                        (if (equal? (readline "Is it good? (y/N) ") "y")
                            (set! good? #t)
                            (delete-file ogg)))))))
               (add stage)
               (process store)))
            ("s"
             (begin
               (skip stage)
               (process store)))
            ("q"
             (cleanup store)))))))

(define (main args)
  (let* ((store (home-path "dl/music"))
         (todo (string-append store "/todo"))
         (done (string-append store "/done")))
    (if (> (length args) 1)
        (match (cadr args)
          ("s" (process store))
          ("d" (prune-todo todo done))
          (string
           (begin
             (append-to-file todo (string-append (string-join (cdr args)) "\n"))
             (begin-downloading #f store todo done))))
        (begin-downloading #t store todo done))))
